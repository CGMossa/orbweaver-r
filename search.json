[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ixpantia SA Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andres Quintero. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Quintero (2023). orbweaver: Fast Efficient Graph Data Structures. R package version 0.1.0.9000.","code":"@Manual{,   title = {orbweaver: Fast and Efficient Graph Data Structures},   author = {Andres Quintero},   year = {2023},   note = {R package version 0.1.0.9000}, }"},{"path":"/index.html","id":"orbweaver","dir":"","previous_headings":"","what":"Fast and Efficient Graph Data Structures","title":"Fast and Efficient Graph Data Structures","text":"fast R library working Nodes graph. library modifies graphs place, similar data.table modifies data.frames place. allows fast memory efficient graph operations.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Fast and Efficient Graph Data Structures","text":"Get root nodes Get leaf nodes Get parents node Get children node Get least common ancestor/parents set nodes Convert list (use libraries like shinyTree). Create data.frame / tibble / derivative","code":""},{"path":[]},{"path":"/index.html","id":"create-an-acyclic-graph-manually","dir":"","previous_headings":"Usage","what":"Create an Acyclic Graph manually","title":"Fast and Efficient Graph Data Structures","text":"example build graph manually.","code":"library(orbweaver)  tree <- new_graph(type = \"acyclic\") |>   # Node A has children B and C   add_child(\"A\", \"B\") |>   add_child(\"A\", \"C\") |>   # Node B has children D and E   add_child(\"B\", \"D\") |>   add_child(\"B\", \"E\") |>   # Node C has child F   add_child(\"C\", \"F\")  tree |>   find_roots() # [1] \"A\"  tree |>   find_leaves(\"A\") # [1] \"F\" \"E\" \"D\"  tree |>   find_least_common_parents(c(\"B\", \"D\", \"E\")) # [1] \"B\""},{"path":"/index.html","id":"create-an-acyclic-graph-from-a-dataframe--derivative","dir":"","previous_headings":"Usage","what":"Create an Acyclic Graph from a data.frame / derivative","title":"Fast and Efficient Graph Data Structures","text":"","code":"library(orbweaver)  example <- data.frame(   parent = c(\"A\", \"A\", \"B\", \"B\", \"C\"),   child = c(\"B\", \"C\", \"D\", \"E\", \"F\") )  tree <- example |>   as_graph(type = \"acyclic\")  tree |>   find_roots() # [1] \"A\"  tree |>   find_leaves(\"A\") # [1] \"F\" \"E\" \"D\"  tree |>   find_least_common_parents(c(\"B\", \"D\", \"E\")) # [1] \"B\""},{"path":"/index.html","id":"convert-to-a-list","dir":"","previous_headings":"Usage","what":"Convert to a list","title":"Fast and Efficient Graph Data Structures","text":"","code":"library(orbweaver)  tree <- new_graph(type = \"acyclic\") |>   # Node A has children B and C   add_child(\"A\", \"B\") |>   add_child(\"A\", \"C\") |>   # Node B has children D and E   add_child(\"B\", \"D\") |>   add_child(\"B\", \"E\") |>   # Node C has child F   add_child(\"C\", \"F\")  tree |>   as.list() # $A # $A$C # $A$C$F # [1] \"\" #  #  # $A$B # $A$B$D # [1] \"\" #  # $A$B$E # [1] \"\""},{"path":[]},{"path":"/index.html","id":"rust-toolchain","dir":"","previous_headings":"Installation","what":"Rust Toolchain","title":"Fast and Efficient Graph Data Structures","text":"installing package, need install Rust toolchain. Mac Linux, can running following command terminal:","code":"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"},{"path":"/index.html","id":"windows","dir":"","previous_headings":"Installation > Rust Toolchain","what":"Windows","title":"Fast and Efficient Graph Data Structures","text":"Windows, can download installer . order compile package manually, need GNU ABI used GCC toolchain. default Windows, need install toolchain manually. can running following command terminal: Windows may need install Rtools well. can download installer .","code":"rustup toolchain install stable-gnu"},{"path":"/index.html","id":"r-package","dir":"","previous_headings":"Installation","what":"R Package","title":"Fast and Efficient Graph Data Structures","text":"Rust toolchain installed, can install package Git using whatever method prefer. remotes: devtools: renv: pak:","code":"remotes::install_github(\"ixpantia/orbweaver\") devtools::install_github(\"ixpantia/orbweaver\") renv::install(\"ixpantia/orbweaver\") pak::pak(\"ixpantia/orbweaver\")"},{"path":"/reference/add_child.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Child — add_child","title":"Add Child — add_child","text":"Adds child node. child already exists, nothing happens. parent child exist, created. Note: function modifies graph place. return new graph. done performance memory reasons. works similar way data.table package.","code":""},{"path":"/reference/add_child.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Child — add_child","text":"","code":"add_child(graph, parent, child)"},{"path":"/reference/add_child.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Child — add_child","text":"graph graph add child . parent ID parent node. child ID child node.","code":""},{"path":"/reference/add_child.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Child — add_child","text":"graph.","code":""},{"path":"/reference/add_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Node — add_node","title":"Add Node — add_node","text":"Adds node graph. node already exists, nothing happens. Note: function modifies graph place. return new graph. done performance memory reasons. works similar way data.table package.","code":""},{"path":"/reference/add_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Node — add_node","text":"","code":"add_node(graph, node)"},{"path":"/reference/add_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Node — add_node","text":"graph graph add node . node ID node add.","code":""},{"path":"/reference/add_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Node — add_node","text":"graph.","code":""},{"path":"/reference/as.list.AcyclicGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to List — as.list.AcyclicGraph","title":"Convert to List — as.list.AcyclicGraph","text":"Converts graph list.","code":""},{"path":"/reference/as.list.AcyclicGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to List — as.list.AcyclicGraph","text":"","code":"# S3 method for AcyclicGraph as.list(x, ...)"},{"path":"/reference/as.list.AcyclicGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to List — as.list.AcyclicGraph","text":"... Ignored. graph graph convert list.","code":""},{"path":"/reference/as.list.AcyclicGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to List — as.list.AcyclicGraph","text":"list representation graph.","code":""},{"path":"/reference/as_graph.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Data.frame as graph — as_graph.data.frame","title":"Data.frame as graph — as_graph.data.frame","text":"Converts data.frame graph.","code":""},{"path":"/reference/as_graph.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data.frame as graph — as_graph.data.frame","text":"","code":"# S3 method for data.frame as_graph(x, type, ...)"},{"path":"/reference/as_graph.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data.frame as graph — as_graph.data.frame","text":"x data.frame convert graph. type type graph convert . Currently acyclic supported. ... Ignored.","code":""},{"path":"/reference/as_graph.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data.frame as graph — as_graph.data.frame","text":"graph.","code":""},{"path":"/reference/as_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"As graph — as_graph","title":"As graph — as_graph","text":"Attempts convert object graph.","code":""},{"path":"/reference/as_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"As graph — as_graph","text":"","code":"as_graph(x, type, ...)"},{"path":"/reference/as_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"As graph — as_graph","text":"x object convert graph. type type graph convert . Currently acyclic supported. ... Additional arguments passed method.","code":""},{"path":"/reference/as_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"As graph — as_graph","text":"graph.","code":""},{"path":"/reference/clone_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone Graph — clone_graph","title":"Clone Graph — clone_graph","text":"Creates copy graph.","code":""},{"path":"/reference/clone_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone Graph — clone_graph","text":"","code":"clone_graph(graph)"},{"path":"/reference/clone_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone Graph — clone_graph","text":"graph graph clone.","code":""},{"path":"/reference/clone_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone Graph — clone_graph","text":"new graph.","code":""},{"path":"/reference/find_least_common_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Least Common Parents from an Acyclic Graph — find_least_common_parents","title":"Get Least Common Parents from an Acyclic Graph — find_least_common_parents","text":"Gets least common parents set nodes. set parents parents nodes selected. useful example want group set parents set nodes.","code":""},{"path":"/reference/find_least_common_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Least Common Parents from an Acyclic Graph — find_least_common_parents","text":"","code":"find_least_common_parents(graph, nodes)"},{"path":"/reference/find_least_common_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Least Common Parents from an Acyclic Graph — find_least_common_parents","text":"graph graph get least common parents . nodes nodes get least common parents .","code":""},{"path":"/reference/find_least_common_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Least Common Parents from an Acyclic Graph — find_least_common_parents","text":"character vector least common parents nodes.","code":""},{"path":"/reference/find_leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Leaves / Maximum Depth — find_leaves","title":"Get Leaves / Maximum Depth — find_leaves","text":"Gets leaves graph descend node.","code":""},{"path":"/reference/find_leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Leaves / Maximum Depth — find_leaves","text":"","code":"find_leaves(graph, node)"},{"path":"/reference/find_leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Leaves / Maximum Depth — find_leaves","text":"graph graph get leaves . node ID node get leaves .","code":""},{"path":"/reference/find_leaves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Leaves / Maximum Depth — find_leaves","text":"character vector leaves node.","code":""},{"path":"/reference/find_roots.html","id":null,"dir":"Reference","previous_headings":"","what":"Find roots — find_roots","title":"Find roots — find_roots","text":"Gets roots graph.","code":""},{"path":"/reference/find_roots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find roots — find_roots","text":"","code":"find_roots(graph)"},{"path":"/reference/find_roots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find roots — find_roots","text":"graph graph get roots .","code":""},{"path":"/reference/find_roots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find roots — find_roots","text":"character vector roots graph.","code":""},{"path":"/reference/get_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Children — get_children","title":"Get Children — get_children","text":"Gets children node.","code":""},{"path":"/reference/get_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Children — get_children","text":"","code":"get_children(graph, node)"},{"path":"/reference/get_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Children — get_children","text":"graph graph get children . node ID node get children .","code":""},{"path":"/reference/get_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Children — get_children","text":"character vector children node.","code":""},{"path":"/reference/get_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Parents — get_parents","title":"Get Parents — get_parents","text":"Gets parents node.","code":""},{"path":"/reference/get_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Parents — get_parents","text":"","code":"get_parents(graph, node)"},{"path":"/reference/get_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Parents — get_parents","text":"graph graph get parents . node ID node get parents .","code":""},{"path":"/reference/get_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Parents — get_parents","text":"character vector parents node.","code":""},{"path":"/reference/new_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a new graph — new_graph","title":"Initialize a new graph — new_graph","text":"Initializes new graph given type.","code":""},{"path":"/reference/new_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a new graph — new_graph","text":"","code":"new_graph(type)"},{"path":"/reference/new_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a new graph — new_graph","text":"type type graph create. Currently acyclic supported.","code":""}]
